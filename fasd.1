.\" Automatically generated by Pandoc 3.6.2
.\"
.TH "FASD" "1" "Jul 16, 2012" "fasd user manual"
.SH NAME
fasd \- quick access to files and directories
.SH SYNOPSIS
fasd options [query \&...]
.PP
[f|a|s|d|z] options [query \&...]
.PP
fasd [\-A|\-D] [paths \&...]
.SH OPTIONS
.IP
.EX
\-s         list paths with ranks
\-l         list paths without ranks
\-i         interactive mode
\-e <cmd>   set command to execute on the result file
\-b <name>  only use <name> backend
\-B <name>  add additional backend <name>
\-a         match files and directories
\-d         match directories only
\-f         match files only
\-r         match by rank only
\-t         match by recent access only
\-R         reverse listing order
\-h         show a brief help message
\-[0\-9]     select the nth entry
.EE
.SH DESCRIPTION
Fasd keeps track of files and directories you access in your shell and
gives you quick access to them.
You can use fasd to reference files or directories by just a few key
identifying characters.
You can use fasd to boost your command line productivity by defining
your own aliases to launch programs on files or directories.
Fasd, by default, provides some basic aliases, including a shell
function \[lq]z\[rq] that resembles the functionality of \[lq]z\[rq] and
\[lq]autojump.\[rq]
.PP
The name \[lq]fasd\[rq] comes from the default suggested aliases
\f[CR]f\f[R](files), \f[CR]a\f[R](files/directories),
\f[CR]s\f[R](show/search/select), \f[CR]d\f[R](directories).
.PP
Fasd ranks files and directories by \[lq]frecency,\[rq] that is, by both
\[lq]frequency\[rq] and \[lq]recency.\[rq] The term \[lq]frecency\[rq]
was first coined by Mozilla and used in Firefox.
.SH EXAMPLES
.IP
.EX
z bundle
f \-e vim nginx conf
f \-i rc$
vi \[ga]f nginx conf\[ga]
cp update.html \[ga]d www\[ga]
open \[ga]sf pdf\[ga]
.EE
.SH SHELL INITIALIZATION
To get fasd working in a shell, some initialization code must be run.
Put lines below in your POSIX compatible shell rc.
.IP
.EX
eval \[dq]$(fasd \-\-init auto)\[dq]
.EE
.PP
This will setup a command hook that executes on every command and
advanced tab completion for zsh and bash.
.PP
If you want more control over what gets into your shell environment, you
can pass customized set of arguments to \f[CR]fasd \-\-init\f[R].
.IP
.EX
zsh\-hook             # define _fasd_preexec and add it to zsh preexec array
zsh\-ccomp            # zsh command mode completion definitions
zsh\-ccomp\-install    # setup command mode completion for zsh
zsh\-wcomp            # zsh word mode completion definitions
zsh\-wcomp\-install    # setup word mode completion for zsh
bash\-hook            # add hook code to bash $PROMPT_COMMAND
bash\-ccomp           # bash command mode completion definitions
bash\-ccomp\-install   # setup command mode completion for bash
posix\-alias          # define aliases that applies to all posix shells
posix\-hook           # setup $PS1 hook for shells that\[aq]s posix compatible
tcsh\-alias           # define aliases for tcsh
tcsh\-hook            # setup tcsh precmd alias
.EE
.PP
Example for a minimal zsh setup (no tab completion):
.IP
.EX
eval \[dq]$(fasd \-\-init posix\-alias zsh\-hook)\[dq]
.EE
.PP
Note that this method will slightly increase your shell start\-up time,
since calling binaries has overhead.
You can cache fasd init code if you want minimal overhead.
Example code for bash (to be put into .bashrc):
.IP
.EX
fasd_cache=\[dq]$HOME/.fasd\-init\-bash\[dq]
if [ \[dq]$(command \-v fasd)\[dq] \-nt \[dq]$fasd_cache\[dq] \-o ! \-s \[dq]$fasd_cache\[dq] ]; then
  fasd \-\-init posix\-alias bash\-hook bash\-ccomp bash\-ccomp\-install >| \[dq]$fasd_cache\[dq]
fi
source \[dq]$fasd_cache\[dq]
unset fasd_cache
.EE
.PP
Optionally, if you can also source \f[CR]fasd\f[R] if you want
\f[CR]fasd\f[R] to be a shell function instead of an executable.
.PP
You can tweak initialization code.
For instance, if you want to use \[lq]c\[rq] instead of \[lq]z\[rq] to
do directory jumping, you can use the alias below:
.IP
.EX
alias c=\[aq]fasd_cd \-d\[aq]
# \[ga]\-d\[aq] option present for bash completion
# function fasd_cd is defined in posix\-alias
.EE
.SH MATCHING
Fasd has three matching modes: default, case\-insensitive, and fuzzy.
.PP
For a given set of queries (the set of command\-line arguments passed to
fasd), a path is a match if and only if:
.IP "1." 3
Queries match the path in order.
.IP "2." 3
The last query matches the last segment of the path.
.PP
If no match is found, fasd will try the same process ignoring case.
If still no match is found, fasd will allow extra characters to be
placed between query characters for fuzzy matching.
.PP
Tips:
.IP \[bu] 2
If you want your last query not to match the last segment of the path,
append \[ga]/\[cq] as the last query.
.IP \[bu] 2
If you want your last query to match the end of the filename, append
\[ga]$\[cq] to the last query.
.SH COMPATIBILITY
Fasd\[cq]s basic functionalities are POSIX compliant, meaning that you
should be able to use fasd in all POSIX compliant shells.
Your shell need to support command substitution in $PS1 in order for
fasd to automatically track your commands and files.
This feature is not specified by the POSIX standard, but it\[cq]s
nonetheless present in many POSIX compliant shells.
In shells without prompt command or prompt command substitution (tcsh
for instance), you can add entries manually with \[lq]fasd \-A\[rq].
You are very welcomed to contribute shell initialization code for not
yet supported shells.
.SH TAB COMPLETION
Fasd offers two completion modes, command mode completion and word mode
completion.
Command mode completion works in bash and zsh.
Word mode completion only works in zsh.
.PP
Command mode completion is just like completion for any other commands.
It is triggered when you hit tab on a fasd command or its aliases.
Under this mode your queries can be separated by a space.
Tip: if you find that the completion result overwrites your queries,
type an extra space before you hit tab.
.PP
Word mode completion can be triggered on \f[I]any\f[R] command.
Word completion is triggered by any command line argument that starts
with \[lq],\[rq] (all), \[lq]f,\[rq] (files), or \[lq]d,\[rq]
(directories), or that ends with \[lq],,\[rq] (all), \[lq],,f\[rq]
(files), or \[lq],,d\[rq] (directories).
Examples:
.IP
.EX
$ vim ,rc,lo<Tab>
$ vim /etc/rc.local

$ mv index.html d,www<Tab>
$ mv index.html /var/www/
.EE
.PP
There are also three zle widgets: \[lq]fasd\-complete\[rq],
\[lq]fasd\-complete\-f\[rq], \[lq]fasd\-complete\-d\[rq].
You can bind them to keybindings you like:
.IP
.EX
bindkey \[aq]\[ha]X\[ha]A\[aq] fasd\-complete    # C\-x C\-a to do fasd\-complete (files and directories)
bindkey \[aq]\[ha]X\[ha]F\[aq] fasd\-complete\-f  # C\-x C\-f to do fasd\-complete\-f (only files)
bindkey \[aq]\[ha]X\[ha]D\[aq] fasd\-complete\-d  # C\-x C\-d to do fasd\-complete\-d (only directories)
.EE
.SH BACKENDS
Fasd can take advantage of different sources of recent / frequent files.
Most desktop environments (such as OS X and Gtk) and some editors (such
as Vim) keep a list of accessed files.
Fasd can use them as additional backends if the data can be converted
into fasd\[cq]s native format.
Below is a list of available backends.
.IP \[bu] 2
spotlight: OSX spotlight, provides entries that are changed today or
opened within the past month
.IP \[bu] 2
recently\-used: GTK\[cq]s recently\-used file (Usually available on
Linux)
.IP \[bu] 2
current: Provides everything in $PWD (whereever you are executing
\f[CR]fasd\f[R])
.IP \[bu] 2
viminfo: Vim\[cq]s editing history, useful if you want to define an
alias just for editing things in vim
.PP
You can define your own backend by declaring a function by that name in
your configuration file.
You can set default backend with \f[CR]_FASD_BACKENDS\f[R] variable.
.SH CONFIGURATION
Upon every execution, fasd will look for a configuration file in the
following order:
.IP "1." 3
\f[CR]$XDG_CONFIG_HOME/fasd/config\f[R]
.IP "2." 3
\f[CR]$HOME/.config/fasd/config\f[R]
.IP "3." 3
\f[CR]$XDG_CONFIG_DIRS/fasd/config\f[R]
.IP "4." 3
\f[CR]/etc/xdg/fasd/config\f[R]
.IP "5." 3
\f[CR]/etc/fasdrc\f[R] and \f[CR]$HOME/.fasdrc\f[R] (for backward
compatibility)
.PP
Below are the available variables you can set:
.IP
.EX
$_FASD_DATA
Path to the fasd data file, default \[dq]$XDG_CACHE_HOME/fasd\[dq] or \[dq]$HOME/.cache/fasd\[dq] if $XDG_CACHE_HOME is not set.

$_FASD_BLACKLIST
List of blacklisted strings. Commands matching them will not be processed.
Default is \[dq]\-\-help\[dq].

$_FASD_SHIFT
List of all commands that needs to be shifted, defaults to \[dq]sudo busybox\[dq].

$_FASD_IGNORE
List of all commands that will be ignored, defaults to \[dq]fasd ls echo\[dq].

$_FASD_TRACK_PWD
Fasd defaults to track your \[dq]$PWD\[dq]. Set this to 0 to disable this behavior.

$_FASD_AWK
Which awk to use. fasd can detect and use a compatible awk.

$_FASD_SINK
File to log all STDERR to, defaults to \[dq]/dev/null\[dq].

$_FASD_MAX
Max total score / weight, defaults to 2000.

$_FASD_SHELL
Which shell to execute. Some shells will run faster than others. fasd
runs faster with dash and ksh variants.

$_FASD_BACKENDS
Default backends.

$_FASD_RO
If set to any non\-empty string, fasd will not add or delete entries from
database. You can set and export this variable from command line.

$_FASD_FUZZY
Level of \[dq]fuzziness\[dq] when doing fuzzy matching. More precisely, the number of
characters that can be skipped to generate a match. Set to empty or 0 to
disable fuzzy matching. Default value is 2.

$_FASD_VIMINFO
Path to .viminfo file for viminfo backend, defaults to \[dq]$HOME/.viminfo\[dq]

$_FASD_RECENTLY_USED_XBEL
Path to XDG recently\-used.xbel file for recently\-used backend, defaults to
\[dq]$HOME/.local/share/recently\-used.xbel\[dq]

$_FASD_NOCASE
If set to any non\-empty string, fasd will ignore case when matching.
.EE
.SH DEBUGGING
Fasd is hosted on GitHub: https://github.com/clvv/fasd
.PP
If fasd does not work as expected, please file a bug report on GitHub
describing the unexpected behavior along with your OS version, shell
version, awk version, sed version, and a log file.
.PP
You can set \f[CR]_FASD_SINK\f[R] in your configuration file to obtain a
log.
.IP
.EX
_FASD_SINK=\[dq]$HOME/fasd.log\[dq]
.EE
.SH COPYING
Fasd is originally written based on code from z
(https://github.com/rupa/z) by rupa deadwyler under the WTFPL license.
Most if not all of the code has been rewritten.
Fasd is licensed under the \[lq]MIT/X11\[rq] license.
.SH AUTHORS
Wei Dai \c
.MT x@wei23.net
.ME \c
\ and contributors.
